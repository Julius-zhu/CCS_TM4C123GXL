
#include <stdint.h>
#include <stdbool.h>
#include "math.h"
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "driverlib/rom.h"
#include "driverlib/pwm.h"
#include "driverlib/fpu.h"
#include "driverlib/pin_map.h"
#include "driverlib/interrupt.h"
#include "inc/tm4c123gh6pm.h"
#include "driverlib/timer.h"

 uint32_t ui32Period, ui32PWMPeriod, width, count, ui32duty[1000], sample, base, amp ,number ;


int main(void)
{
  FPUEnable();
  FPULazyStackingEnable();

  sample=1000;
  base=50;
  amp=50;
  number=0;

  for(count=0;count<1000;++count)
      {
       ui32duty[count]=base+amp*sin(2*3.1415926535*count);
      }

  SysCtlClockSet(SYSCTL_SYSDIV_1|SYSCTL_USE_OSC|SYSCTL_OSC_MAIN|SYSCTL_XTAL_16MHZ);

  SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM1);
  SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
  GPIOPinTypePWM(GPIO_PORTF_BASE, GPIO_PIN_1);

  GPIOPinConfigure(GPIO_PF1_M1PWM5);

  GPIOPadConfigSet(GPIO_PORTF_BASE, GPIO_PIN_1, GPIO_STRENGTH_8MA, GPIO_PIN_TYPE_STD);
  SysCtlPWMClockSet(SYSCTL_PWMDIV_1);

  PWMGenConfigure(PWM1_BASE, PWM_GEN_2, PWM_GEN_MODE_UP_DOWN | PWM_GEN_MODE_NO_SYNC);

  ui32Period=SysCtlClockGet();
  ui32PWMPeriod=ui32Period/20;

  PWMGenPeriodSet(PWM1_BASE, PWM_GEN_2, ui32PWMPeriod);
  PWMPulseWidthSet(PWM1_BASE, PWM_OUT_5, (ui32PWMPeriod/2));

  SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER0);
  TimerConfigure(TIMER0_BASE, TIMER_CFG_PERIODIC);

  TimerLoadSet(TIMER0_BASE, TIMER_A, ui32Periodmple-1);

  IntEnable(INT_TIMER0A);
  TimerIntEnable(TIMER0_BASE, TIMER_TIMA_TIMEOUT);
  IntMasterEnable();

  TimerEnable(TIMER0_BASE, TIMER_A);

  PWMOutputState(PWM1_BASE, (PWM_OUT_5_BIT ), true);

  PWMGenEnable(PWM1_BASE, PWM_GEN_2);

  while (1)
  {
  }

}

void Timer0IntHandler(void)
{
   TimerIntClear(TIMER0_BASE, TIMER_TIMA_TIMEOUT);

   width=(ui32PWMPeriod*ui32duty[number]/100);
   PWMPulseWidthSet(PWM1_BASE, PWM_OUT_5, width);

   number=number+1;

   if(number==sample)
   {
       number=0;
   }

}
